
package dbclient.view;


import java.awt.event.KeyEvent;


import java.io.File;


import java.io.FileInputStream;
import java.io.FileNotFoundException;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import java.sql.Statement;


import java.util.ArrayList;

import java.util.Scanner;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultEditorKit;
import javax.swing.tree.TreeModel;
import javax.swing.undo.UndoManager;


/**
 *
 * @author Price
 */
public class MainForm extends javax.swing.JFrame {

    /** Creates new form Main */
    public MainForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        sqlArea = new javax.swing.JTabbedPane();
        outputArea = new javax.swing.JTabbedPane();
        consoleOutput = new javax.swing.JScrollPane();
        console = new javax.swing.JEditorPane();
        MainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        connect = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        newFile = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        saveFile = new javax.swing.JMenuItem();
        closeFile = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undo = new javax.swing.JMenuItem();
        redo = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        cut = new javax.swing.JMenuItem(new DefaultEditorKit.CutAction());
        copy = new javax.swing.JMenuItem(new DefaultEditorKit.CopyAction());
        paste = new javax.swing.JMenuItem(new DefaultEditorKit.PasteAction());
        runMenu = new javax.swing.JMenu();
        runScript = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DBClient");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(560, 420));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        console.setEditable(false);
        consoleOutput.setViewportView(console);

        outputArea.addTab("Вывод", consoleOutput);

        fileMenu.setText("Файл");

        connect.setText("Соединиться...");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });
        fileMenu.add(connect);
        fileMenu.add(jSeparator1);

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFile.setText("Новый...");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        fileMenu.add(newFile);
        fileMenu.add(jSeparator2);

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFile.setText("Сохранить");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        fileMenu.add(saveFile);

        closeFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        closeFile.setText("Закрыть");
        closeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFileActionPerformed(evt);
            }
        });
        fileMenu.add(closeFile);
        fileMenu.add(jSeparator4);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exit.setText("Выход");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        fileMenu.add(exit);

        MainMenu.add(fileMenu);

        editMenu.setText("Редактирование");

        undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undo.setText("Отменить");
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        editMenu.add(undo);

        redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redo.setText("Вернуть");
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });
        editMenu.add(redo);
        editMenu.add(jSeparator6);

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setMnemonic(KeyEvent.VK_T);
        cut.setText("Вырезать");
        editMenu.add(cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy.setMnemonic(KeyEvent.VK_C);
        copy.setText("Копировать");
        copy.setToolTipText("");
        editMenu.add(copy);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setMnemonic(KeyEvent.VK_P);
        paste.setText("Вставить");
        editMenu.add(paste);

        MainMenu.add(editMenu);

        runMenu.setText("Выполнить");

        runScript.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        runScript.setText("Выполнить сценарий");
        runScript.setEnabled(false);
        runScript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runScriptActionPerformed(evt);
            }
        });
        runMenu.add(runScript);

        MainMenu.add(runMenu);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sqlArea)
            .addComponent(outputArea, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sqlArea, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputArea, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }//GEN-END:initComponents

    private void initFile(String filePath) {
        try {
            file = new File(filePath);
            writer = new PrintWriter(file);
            sqlFile = new JTextArea();
            sqlFileIndex = new JScrollPane();
            undoMgr = new UndoManager();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return;
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
    }

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        createSqlFle = new CreateSqlFile();
        createSqlFle.setVisible(true);
        String filePath = createSqlFle.getFileLocation().getText() + createSqlFle.getFileName().getText();
        if(createSqlFle.isStatus()) {
            if(file == null)
                initFile(filePath);
            sqlFile.getDocument().addUndoableEditListener(undoMgr);
            sqlFileIndex.setViewportView(sqlFile);
            sqlArea.addTab(file.getName(), sqlFileIndex);
            runScript.setEnabled(true);
        }
    }//GEN-LAST:event_newFileActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        if(!saved) {
            saveFileActionPerformed(evt);
        }
        closeStreams();
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        if(!saved) {
            save();
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void closeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFileActionPerformed
        if(!saved) {
            saveFileActionPerformed(evt);
        }
        sqlArea.remove(sqlFileIndex);
        closeStreams();
        file = null;
        sqlFile = null;
        sqlFileIndex = null;
        undoMgr = null;
        sqlArea.remove(sqlFile);
        saved = false;
    }//GEN-LAST:event_closeFileActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        connDialog = new ConnectionDialog();
        connDialog.setVisible(true);
        if(connDialog.isStatus()) {
            try {
                url = connDialog.getUrl().getText();
                username = connDialog.getUsrname().getText();
                password = connDialog.getPwd().getText();
                conn = getConnection();
                if(conn != null) {
                    connected = true;
                    this.setTitle(getTitle() + "   " + conn.getMetaData().getDatabaseProductName() + ":" +
                                  conn.getMetaData().getUserName());
                }
                System.out.println("Connected");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e);
            }
        }        
    }//GEN-LAST:event_connectActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        if(undoMgr.canUndo())
            undoMgr.undo();
    }//GEN-LAST:event_undoActionPerformed

    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
        if(undoMgr.canRedo())
            undoMgr.redo();
    }//GEN-LAST:event_redoActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(!saved) {
            save();
        }
        closeStreams();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void runScriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runScriptActionPerformed
        if(!connected)
            connectActionPerformed(evt);
        try {
            stmt = conn.createStatement();
            stmt.execute(sqlFile.getText());
            rs = stmt.getResultSet();
            result = new ArrayList<String>();
            while(rs.next()) {
                result.add(rs.getNString(1));
            }
            console.setText(result.toString());
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_runScriptActionPerformed

    private void save() {
        if(writer != null && sqlFile != null) {
            writer.write(sqlFile.getText());
            saved = true;
        }
    }
    
    private void closeStreams() {
        try {            
        } finally {
            try {
                if(writer != null)
                    writer.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                if(conn != null) {
                    conn.close();
                    connected = false;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                if(stmt != null)
                    stmt.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                if(rs != null)
                    rs.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    public static Connection getConnection() throws SQLException {
        conn = DriverManager.getConnection(url, username, password);
        conn.setAutoCommit(false);
        return conn;
    }
    
    public JFileChooser chsrParams(JFileChooser chooser, String btnTxt, String dlgTitle) {
        chooser = new JFileChooser();
        chooser.setApproveButtonText(btnTxt);
        chooser.setDialogTitle(dlgTitle);
        chooser.removeChoosableFileFilter(chooser.getFileFilter());
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Все файлы (*.*)", "*"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("SQL-Script (*.sql)", "sql"));
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Текстовый файл (*.txt)", "txt"));
        return chooser;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    private JTextArea sqlFile;
    private JScrollPane sqlFileIndex;
    private CreateSqlFile createSqlFle;
    private File file;
    private FileInputStream fin;
    private PrintWriter writer;
    private String currentfile;
    private boolean saved = false;
    private boolean connected = false;
    private JFileChooser chooser;
    private String sqlCtx;
    private ConnectionDialog connDialog;
    private UndoManager undoMgr;
    private static Connection conn = null;
    private static Statement stmt = null;
    private static ResultSet rs = null;
    private static String url;
    private static String username;
    private static String password;
    private ArrayList<String> result;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JMenuItem closeFile;
    private javax.swing.JMenuItem connect;
    private javax.swing.JEditorPane console;
    private javax.swing.JScrollPane consoleOutput;
    private javax.swing.JMenuItem copy;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JTabbedPane outputArea;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem redo;
    private javax.swing.JMenu runMenu;
    private javax.swing.JMenuItem runScript;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JTabbedPane sqlArea;
    private javax.swing.JMenuItem undo;
    // End of variables declaration//GEN-END:variables

}
